import os
import time
import uuid
import telebot
import config
from telebot import types
from face.face import recognize

bot = telebot.TeleBot(config.TOKEN)
logs_chat_id = '-1001766112276'
statuses = {}
genders = {}
titles = {}
emojis = ['ü§ô', '‚ù§Ô∏è', 'üëã', 'üòÇ', 'üòç', 'ü§Ø', 'üò¥', 'ü§©', 'üò¢', 'üí°', '‚òÅÔ∏è', 'ü§ß', 'üò§', 'ü•∞', 'ü•≥', 'üòò', 'ü§¨', 'üòÖ',
          'üòè', 'üòå', 'üò¨', 'üëç', 'üëé', '‚úåÔ∏è', 'üëê', 'üëä', 'ü§≠', 'üíÅ‚Äç‚ôÄÔ∏è', 'üôè', 'üôÖ‚Äç‚ôÄÔ∏è', 'ü§û', 'ü§´', 'ü§î', 'üòß', 'üòú',
          'üë©‚Äçüíª', 'üôã‚Äç‚ôÄÔ∏è', 'ü§∑‚Äç‚ôÄÔ∏è', 'ü§¶‚Äç‚ôÄÔ∏è', 'üôÑ', 'üò≥', 'üò°', 'üòâ', 'üòî', 'üòÉ']


@bot.message_handler(commands=["createstickerpack"])
def init_creation(message):
    statuses[message.chat.id] = 'waiting for button'
    keyboard = types.InlineKeyboardMarkup()
    button_male = types.InlineKeyboardButton(text="–º—É–∂—Å–∫–æ–π", callback_data="male")
    button_female = types.InlineKeyboardButton(text="–∂–µ–Ω—Å–∫–∏–π", callback_data="female")
    keyboard.add(button_male, button_female)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def set_gender(call: types.CallbackQuery):
    if statuses.get(call.message.chat.id) != 'waiting for button':
        return

    genders[call.message.chat.id] = call.data
    bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ. \n\n–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π:\n'
                                      '‚úÖÔ∏è –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—ã–ª–æ –æ–¥–Ω–æ –ª–∏—Ü–æ;\n'
                                      '‚úÖÔ∏è –¥–ª—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.\n\n'
                                      '–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:')
    bot.send_photo(call.message.chat.id, open(r'example.jpg', 'rb'))
    statuses[call.message.chat.id] = 'init'


@bot.message_handler(content_types=['text'])
def text_message_answer(message):

    if statuses.get(message.chat.id) == 'preparing stickerpack':
        bot.send_message(message.chat.id, '–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é, —Å–æ–±–∏—Ä–∞—é —Ç–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å '
                                          '–Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')
        return

    if statuses.get(message.chat.id) != 'waiting title':
        bot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è üò£ \n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É '
                                          '/createstickerpack')
        bot.send_message(logs_chat_id, message.from_user.first_name + ' –ø—Ä–∏—Å–ª–∞–ª –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:' + message.text)
        return

    titles[message.chat.id] = message.text
    statuses[message.chat.id] = 'preparing stickerpack'


@bot.message_handler(content_types=['photo'])
def create_stickerpack(message):

    bot.send_message(logs_chat_id, message.from_user.first_name + ' –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ:')
    bot.send_photo(logs_chat_id, message.photo[-1].file_id)

    if statuses.get(message.chat.id) is None or statuses[message.chat.id] != 'init':
        bot.send_message(message.chat.id, '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /createstickerpack')
        return

    bot.send_message(message.chat.id, '–ö—Ä—É—Ç–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ üëá')
    statuses[message.chat.id] = 'waiting title'

    user_photo_id = message.photo[-1].file_id
    file_info = bot.get_file(user_photo_id)
    downloaded_file = bot.download_file(file_info.file_path)
    with open("image.png", 'wb') as user_photo:
        user_photo.write(downloaded_file)
    user_photo.close()

    res = recognize(os.getcwd() + r'\image.png', genders[message.chat.id])

    stickerpack_name = 'cat' + uuid.uuid4().hex[0:30] + '_by_sticker_box_bot'

    start_time = time.perf_counter()
    while statuses[message.chat.id] != 'preparing stickerpack':
        if time.perf_counter() - start_time > 120:
            statuses[message.chat.id] = 'timeout'
            return
        time.sleep(1)
    if statuses[message.chat.id] == 'timeout':
        bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –∂–¥–∞—Ç—å —Ç–∞–∫ –¥–æ–ª–≥–æ. –ù–∏—á–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ, —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å.')
        bot.send_message(message.chat.id, '–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /createstickerpack')
        statuses.pop(message.chat.id)
        return
    if res is None:
        bot.send_message(message.chat.id, '–õ–∏—Ü–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ç–æ.')
        statuses.pop(message.chat.id)
        return
    title = titles[message.chat.id]
    bot.send_message(message.chat.id, '–§–æ—Ä–º–∏—Ä—É—é —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –¥–ª—è —Ç–µ–±—è...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è.')
    progress = bot.send_message(message.chat.id, '0%')

    stickers_path = 'stickers/' + genders[message.chat.id] + '/set' + str(res) + '/';
    bot.create_new_sticker_set(message.chat.id, stickerpack_name, title, emojis[0], open(stickers_path + '1.webp', 'rb'), None)

    for n in range(2, 46):
        if n % 6 == 0:
            progress = bot.edit_message_text(str(int(n*100/45)) + '%', progress.chat.id, progress.id)
        if n == 45:
            progress = bot.edit_message_text('100%', progress.chat.id, progress.id)
        if n == 28:
            bot.add_sticker_to_set(message.chat.id, stickerpack_name, emojis[n - 1] + 'üíÅ‚Äç‚ôÇÔ∏è' + 'üíÅ',
                                   open(stickers_path + str(n) + '.webp', 'rb'), None)
            continue
        if n == 29:
            bot.add_sticker_to_set(message.chat.id, stickerpack_name, emojis[n - 1] + 'üôÖ‚Äç‚ôÇÔ∏è' + 'üôÖ',
                                   open(stickers_path + str(n) + '.webp', 'rb'), None)
            continue
        if n == 35:
            bot.add_sticker_to_set(message.chat.id, stickerpack_name, emojis[n - 1] + 'üë®‚Äçüíª' + 'üßë‚Äçüíª',
                                   open(stickers_path + str(n) + '.webp', 'rb'), None)
            continue
        if n == 38:
            bot.add_sticker_to_set(message.chat.id, stickerpack_name, emojis[n - 1] + 'ü§∑‚Äç‚ôÇÔ∏è' + 'ü§∑',
                                   open(stickers_path + str(n) + '.webp', 'rb'), None)
            continue
        if n == 39:
            bot.add_sticker_to_set(message.chat.id, stickerpack_name, emojis[n - 1] + 'ü§¶‚Äç‚ôÇÔ∏è' + 'ü§¶',
                                   open(stickers_path + str(n) + '.webp', 'rb'), None)
            continue
        bot.add_sticker_to_set(message.chat.id, stickerpack_name, emojis[n - 1],
                               open(stickers_path + str(n) + '.webp', 'rb'), None)

    thumb = open(stickers_path + 'thumb.webp', 'rb')
    bot.set_sticker_set_thumb(stickerpack_name, message.chat.id, thumb)
    thumb.close()

    link = 'https://telegram.me/addstickers/' + stickerpack_name
    href = "<a href='" + link + "'>" + title + "</a>"
    bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –¢–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: ' + href, parse_mode='HTML')

    statuses.pop(message.chat.id)
    titles.pop(message.chat.id)
    genders.pop(message.chat.id)


# RUN
bot.polling(none_stop=True, timeout=100000)
